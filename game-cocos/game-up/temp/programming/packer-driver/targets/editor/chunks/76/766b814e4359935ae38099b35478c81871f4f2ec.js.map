{"version":3,"sources":["file:///Users/chenchao/code/person/game-upgradation/game-cocos/game-up/assets/iogame/pb/ExternalMessage.ts"],"names":["encodeExternalMessage","message","bb","popByteBuffer","_encodeExternalMessage","toUint8Array","$cmdCode","cmdCode","undefined","writeVarint32","writeVarint64","intToLong","$protocolSwitch","protocolSwitch","$cmdMerge","cmdMerge","$responseStatus","responseStatus","writeVarint32ZigZag","$validMsg","validMsg","writeString","$data","data","length","writeBytes","$msgId","msgId","decodeExternalMessage","binary","_decodeExternalMessage","wrapByteBuffer","end_of_message","isAtEnd","tag","readVarint32","readVarint32ZigZag","readString","readBytes","skipUnknownField","encodeIntValue","_encodeIntValue","$value","value","decodeIntValue","_decodeIntValue","encodeIntValueList","_encodeIntValueList","array$values","values","packed","offset","writeByteBuffer","pushByteBuffer","decodeIntValueList","_decodeIntValueList","outerLimit","pushTemporaryLength","push","limit","encodeLongValue","_encodeLongValue","writeVarint64ZigZag","decodeLongValue","_decodeLongValue","readVarint64ZigZag","encodeLongValueList","_encodeLongValueList","decodeLongValueList","_decodeLongValueList","encodeStringValue","_encodeStringValue","decodeStringValue","_decodeStringValue","encodeStringValueList","_encodeStringValueList","decodeStringValueList","_decodeStringValueList","encodeBoolValue","_encodeBoolValue","writeByte","decodeBoolValue","_decodeBoolValue","readByte","encodeBoolValueList","_encodeBoolValueList","decodeBoolValueList","_decodeBoolValueList","encodeByteValueList","_encodeByteValueList","decodeByteValueList","_decodeByteValueList","encodeIntPb","_encodeIntPb","$intValue","intValue","decodeIntPb","_decodeIntPb","encodeIntListPb","_encodeIntListPb","array$intValues","intValues","decodeIntListPb","_decodeIntListPb","encodeLongPb","_encodeLongPb","$longValue","longValue","decodeLongPb","_decodeLongPb","encodeLongListPb","_encodeLongListPb","array$longValues","longValues","decodeLongListPb","_decodeLongListPb","type","skip","Error","stringToLong","low","charCodeAt","high","unsigned","longToString","String","fromCharCode","bbStack","pop","bytes","Uint8Array","subarray","grow","count","finalOffset","newBytes","set","advance","buffer","invalid","text","i","c1","c2","c3","c4","c","n","byteCount","from","to","readFloat","f32_u8","f32","writeFloat","readDouble","f64_u8","f64","writeDouble","readInt32","writeInt32","readInt64","writeInt64","b","readVarint64","part0","part1","part2","size","flip","Float32Array","Float64Array"],"mappings":"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","sourcesContent":["export interface ExternalMessage {\n  cmdCode?: number;\n  protocolSwitch?: number;\n  cmdMerge?: number;\n  responseStatus?: number;\n  validMsg?: string;\n  data?: Uint8Array;\n  msgId?: number;\n}\n\nexport function encodeExternalMessage(message: ExternalMessage): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeExternalMessage(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeExternalMessage(message: ExternalMessage, bb: ByteBuffer): void {\n  // optional int32 cmdCode = 1;\n  let $cmdCode = message.cmdCode;\n  if ($cmdCode !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint64(bb, intToLong($cmdCode));\n  }\n\n  // optional int32 protocolSwitch = 2;\n  let $protocolSwitch = message.protocolSwitch;\n  if ($protocolSwitch !== undefined) {\n    writeVarint32(bb, 16);\n    writeVarint64(bb, intToLong($protocolSwitch));\n  }\n\n  // optional int32 cmdMerge = 3;\n  let $cmdMerge = message.cmdMerge;\n  if ($cmdMerge !== undefined) {\n    writeVarint32(bb, 24);\n    writeVarint64(bb, intToLong($cmdMerge));\n  }\n\n  // optional sint32 responseStatus = 4;\n  let $responseStatus = message.responseStatus;\n  if ($responseStatus !== undefined) {\n    writeVarint32(bb, 32);\n    writeVarint32ZigZag(bb, $responseStatus);\n  }\n\n  // optional string validMsg = 5;\n  let $validMsg = message.validMsg;\n  if ($validMsg !== undefined) {\n    writeVarint32(bb, 42);\n    writeString(bb, $validMsg);\n  }\n\n  // optional bytes data = 6;\n  let $data = message.data;\n  if ($data !== undefined) {\n    writeVarint32(bb, 50);\n    writeVarint32(bb, $data.length), writeBytes(bb, $data);\n  }\n\n  // optional int32 msgId = 7;\n  let $msgId = message.msgId;\n  if ($msgId !== undefined) {\n    writeVarint32(bb, 56);\n    writeVarint64(bb, intToLong($msgId));\n  }\n}\n\nexport function decodeExternalMessage(binary: Uint8Array): ExternalMessage {\n  return _decodeExternalMessage(wrapByteBuffer(binary));\n}\n\nfunction _decodeExternalMessage(bb: ByteBuffer): ExternalMessage {\n  let message: ExternalMessage = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional int32 cmdCode = 1;\n      case 1: {\n        message.cmdCode = readVarint32(bb);\n        break;\n      }\n\n      // optional int32 protocolSwitch = 2;\n      case 2: {\n        message.protocolSwitch = readVarint32(bb);\n        break;\n      }\n\n      // optional int32 cmdMerge = 3;\n      case 3: {\n        message.cmdMerge = readVarint32(bb);\n        break;\n      }\n\n      // optional sint32 responseStatus = 4;\n      case 4: {\n        message.responseStatus = readVarint32ZigZag(bb);\n        break;\n      }\n\n      // optional string validMsg = 5;\n      case 5: {\n        message.validMsg = readString(bb, readVarint32(bb));\n        break;\n      }\n\n      // optional bytes data = 6;\n      case 6: {\n        message.data = readBytes(bb, readVarint32(bb));\n        break;\n      }\n\n      // optional int32 msgId = 7;\n      case 7: {\n        message.msgId = readVarint32(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface IntValue {\n  value?: number;\n}\n\nexport function encodeIntValue(message: IntValue): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeIntValue(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeIntValue(message: IntValue, bb: ByteBuffer): void {\n  // optional sint32 value = 1;\n  let $value = message.value;\n  if ($value !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint32ZigZag(bb, $value);\n  }\n}\n\nexport function decodeIntValue(binary: Uint8Array): IntValue {\n  return _decodeIntValue(wrapByteBuffer(binary));\n}\n\nfunction _decodeIntValue(bb: ByteBuffer): IntValue {\n  let message: IntValue = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional sint32 value = 1;\n      case 1: {\n        message.value = readVarint32ZigZag(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface IntValueList {\n  values?: number[];\n}\n\nexport function encodeIntValueList(message: IntValueList): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeIntValueList(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeIntValueList(message: IntValueList, bb: ByteBuffer): void {\n  // repeated sint32 values = 1;\n  let array$values = message.values;\n  if (array$values !== undefined) {\n    let packed = popByteBuffer();\n    for (let value of array$values) {\n      writeVarint32ZigZag(packed, value);\n    }\n    writeVarint32(bb, 10);\n    writeVarint32(bb, packed.offset);\n    writeByteBuffer(bb, packed);\n    pushByteBuffer(packed);\n  }\n}\n\nexport function decodeIntValueList(binary: Uint8Array): IntValueList {\n  return _decodeIntValueList(wrapByteBuffer(binary));\n}\n\nfunction _decodeIntValueList(bb: ByteBuffer): IntValueList {\n  let message: IntValueList = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated sint32 values = 1;\n      case 1: {\n        let values = message.values || (message.values = []);\n        if ((tag & 7) === 2) {\n          let outerLimit = pushTemporaryLength(bb);\n          while (!isAtEnd(bb)) {\n            values.push(readVarint32ZigZag(bb));\n          }\n          bb.limit = outerLimit;\n        } else {\n          values.push(readVarint32ZigZag(bb));\n        }\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface LongValue {\n  value?: Long;\n}\n\nexport function encodeLongValue(message: LongValue): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeLongValue(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeLongValue(message: LongValue, bb: ByteBuffer): void {\n  // optional sint64 value = 1;\n  let $value = message.value;\n  if ($value !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint64ZigZag(bb, $value);\n  }\n}\n\nexport function decodeLongValue(binary: Uint8Array): LongValue {\n  return _decodeLongValue(wrapByteBuffer(binary));\n}\n\nfunction _decodeLongValue(bb: ByteBuffer): LongValue {\n  let message: LongValue = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional sint64 value = 1;\n      case 1: {\n        message.value = readVarint64ZigZag(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface LongValueList {\n  values?: Long[];\n}\n\nexport function encodeLongValueList(message: LongValueList): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeLongValueList(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeLongValueList(message: LongValueList, bb: ByteBuffer): void {\n  // repeated sint64 values = 1;\n  let array$values = message.values;\n  if (array$values !== undefined) {\n    let packed = popByteBuffer();\n    for (let value of array$values) {\n      writeVarint64ZigZag(packed, value);\n    }\n    writeVarint32(bb, 10);\n    writeVarint32(bb, packed.offset);\n    writeByteBuffer(bb, packed);\n    pushByteBuffer(packed);\n  }\n}\n\nexport function decodeLongValueList(binary: Uint8Array): LongValueList {\n  return _decodeLongValueList(wrapByteBuffer(binary));\n}\n\nfunction _decodeLongValueList(bb: ByteBuffer): LongValueList {\n  let message: LongValueList = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated sint64 values = 1;\n      case 1: {\n        let values = message.values || (message.values = []);\n        if ((tag & 7) === 2) {\n          let outerLimit = pushTemporaryLength(bb);\n          while (!isAtEnd(bb)) {\n            values.push(readVarint64ZigZag(bb));\n          }\n          bb.limit = outerLimit;\n        } else {\n          values.push(readVarint64ZigZag(bb));\n        }\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface StringValue {\n  value?: string;\n}\n\nexport function encodeStringValue(message: StringValue): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeStringValue(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeStringValue(message: StringValue, bb: ByteBuffer): void {\n  // optional string value = 1;\n  let $value = message.value;\n  if ($value !== undefined) {\n    writeVarint32(bb, 10);\n    writeString(bb, $value);\n  }\n}\n\nexport function decodeStringValue(binary: Uint8Array): StringValue {\n  return _decodeStringValue(wrapByteBuffer(binary));\n}\n\nfunction _decodeStringValue(bb: ByteBuffer): StringValue {\n  let message: StringValue = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional string value = 1;\n      case 1: {\n        message.value = readString(bb, readVarint32(bb));\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface StringValueList {\n  values?: string[];\n}\n\nexport function encodeStringValueList(message: StringValueList): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeStringValueList(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeStringValueList(message: StringValueList, bb: ByteBuffer): void {\n  // repeated string values = 1;\n  let array$values = message.values;\n  if (array$values !== undefined) {\n    for (let value of array$values) {\n      writeVarint32(bb, 10);\n      writeString(bb, value);\n    }\n  }\n}\n\nexport function decodeStringValueList(binary: Uint8Array): StringValueList {\n  return _decodeStringValueList(wrapByteBuffer(binary));\n}\n\nfunction _decodeStringValueList(bb: ByteBuffer): StringValueList {\n  let message: StringValueList = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated string values = 1;\n      case 1: {\n        let values = message.values || (message.values = []);\n        values.push(readString(bb, readVarint32(bb)));\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface BoolValue {\n  value?: boolean;\n}\n\nexport function encodeBoolValue(message: BoolValue): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeBoolValue(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeBoolValue(message: BoolValue, bb: ByteBuffer): void {\n  // optional bool value = 1;\n  let $value = message.value;\n  if ($value !== undefined) {\n    writeVarint32(bb, 8);\n    writeByte(bb, $value ? 1 : 0);\n  }\n}\n\nexport function decodeBoolValue(binary: Uint8Array): BoolValue {\n  return _decodeBoolValue(wrapByteBuffer(binary));\n}\n\nfunction _decodeBoolValue(bb: ByteBuffer): BoolValue {\n  let message: BoolValue = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional bool value = 1;\n      case 1: {\n        message.value = !!readByte(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface BoolValueList {\n  values?: boolean[];\n}\n\nexport function encodeBoolValueList(message: BoolValueList): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeBoolValueList(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeBoolValueList(message: BoolValueList, bb: ByteBuffer): void {\n  // repeated bool values = 1;\n  let array$values = message.values;\n  if (array$values !== undefined) {\n    let packed = popByteBuffer();\n    for (let value of array$values) {\n      writeByte(packed, value ? 1 : 0);\n    }\n    writeVarint32(bb, 10);\n    writeVarint32(bb, packed.offset);\n    writeByteBuffer(bb, packed);\n    pushByteBuffer(packed);\n  }\n}\n\nexport function decodeBoolValueList(binary: Uint8Array): BoolValueList {\n  return _decodeBoolValueList(wrapByteBuffer(binary));\n}\n\nfunction _decodeBoolValueList(bb: ByteBuffer): BoolValueList {\n  let message: BoolValueList = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated bool values = 1;\n      case 1: {\n        let values = message.values || (message.values = []);\n        if ((tag & 7) === 2) {\n          let outerLimit = pushTemporaryLength(bb);\n          while (!isAtEnd(bb)) {\n            values.push(!!readByte(bb));\n          }\n          bb.limit = outerLimit;\n        } else {\n          values.push(!!readByte(bb));\n        }\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface ByteValueList {\n  values?: Uint8Array[];\n}\n\nexport function encodeByteValueList(message: ByteValueList): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeByteValueList(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeByteValueList(message: ByteValueList, bb: ByteBuffer): void {\n  // repeated bytes values = 1;\n  let array$values = message.values;\n  if (array$values !== undefined) {\n    for (let value of array$values) {\n      writeVarint32(bb, 10);\n      writeVarint32(bb, value.length), writeBytes(bb, value);\n    }\n  }\n}\n\nexport function decodeByteValueList(binary: Uint8Array): ByteValueList {\n  return _decodeByteValueList(wrapByteBuffer(binary));\n}\n\nfunction _decodeByteValueList(bb: ByteBuffer): ByteValueList {\n  let message: ByteValueList = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated bytes values = 1;\n      case 1: {\n        let values = message.values || (message.values = []);\n        values.push(readBytes(bb, readVarint32(bb)));\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface IntPb {\n  intValue?: number;\n}\n\nexport function encodeIntPb(message: IntPb): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeIntPb(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeIntPb(message: IntPb, bb: ByteBuffer): void {\n  // optional sint32 intValue = 1;\n  let $intValue = message.intValue;\n  if ($intValue !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint32ZigZag(bb, $intValue);\n  }\n}\n\nexport function decodeIntPb(binary: Uint8Array): IntPb {\n  return _decodeIntPb(wrapByteBuffer(binary));\n}\n\nfunction _decodeIntPb(bb: ByteBuffer): IntPb {\n  let message: IntPb = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional sint32 intValue = 1;\n      case 1: {\n        message.intValue = readVarint32ZigZag(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface IntListPb {\n  intValues?: number[];\n}\n\nexport function encodeIntListPb(message: IntListPb): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeIntListPb(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeIntListPb(message: IntListPb, bb: ByteBuffer): void {\n  // repeated sint32 intValues = 1;\n  let array$intValues = message.intValues;\n  if (array$intValues !== undefined) {\n    let packed = popByteBuffer();\n    for (let value of array$intValues) {\n      writeVarint32ZigZag(packed, value);\n    }\n    writeVarint32(bb, 10);\n    writeVarint32(bb, packed.offset);\n    writeByteBuffer(bb, packed);\n    pushByteBuffer(packed);\n  }\n}\n\nexport function decodeIntListPb(binary: Uint8Array): IntListPb {\n  return _decodeIntListPb(wrapByteBuffer(binary));\n}\n\nfunction _decodeIntListPb(bb: ByteBuffer): IntListPb {\n  let message: IntListPb = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated sint32 intValues = 1;\n      case 1: {\n        let values = message.intValues || (message.intValues = []);\n        if ((tag & 7) === 2) {\n          let outerLimit = pushTemporaryLength(bb);\n          while (!isAtEnd(bb)) {\n            values.push(readVarint32ZigZag(bb));\n          }\n          bb.limit = outerLimit;\n        } else {\n          values.push(readVarint32ZigZag(bb));\n        }\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface LongPb {\n  longValue?: Long;\n}\n\nexport function encodeLongPb(message: LongPb): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeLongPb(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeLongPb(message: LongPb, bb: ByteBuffer): void {\n  // optional sint64 longValue = 1;\n  let $longValue = message.longValue;\n  if ($longValue !== undefined) {\n    writeVarint32(bb, 8);\n    writeVarint64ZigZag(bb, $longValue);\n  }\n}\n\nexport function decodeLongPb(binary: Uint8Array): LongPb {\n  return _decodeLongPb(wrapByteBuffer(binary));\n}\n\nfunction _decodeLongPb(bb: ByteBuffer): LongPb {\n  let message: LongPb = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // optional sint64 longValue = 1;\n      case 1: {\n        message.longValue = readVarint64ZigZag(bb);\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface LongListPb {\n  longValues?: Long[];\n}\n\nexport function encodeLongListPb(message: LongListPb): Uint8Array {\n  let bb = popByteBuffer();\n  _encodeLongListPb(message, bb);\n  return toUint8Array(bb);\n}\n\nfunction _encodeLongListPb(message: LongListPb, bb: ByteBuffer): void {\n  // repeated sint64 longValues = 1;\n  let array$longValues = message.longValues;\n  if (array$longValues !== undefined) {\n    let packed = popByteBuffer();\n    for (let value of array$longValues) {\n      writeVarint64ZigZag(packed, value);\n    }\n    writeVarint32(bb, 10);\n    writeVarint32(bb, packed.offset);\n    writeByteBuffer(bb, packed);\n    pushByteBuffer(packed);\n  }\n}\n\nexport function decodeLongListPb(binary: Uint8Array): LongListPb {\n  return _decodeLongListPb(wrapByteBuffer(binary));\n}\n\nfunction _decodeLongListPb(bb: ByteBuffer): LongListPb {\n  let message: LongListPb = {} as any;\n\n  end_of_message: while (!isAtEnd(bb)) {\n    let tag = readVarint32(bb);\n\n    switch (tag >>> 3) {\n      case 0:\n        break end_of_message;\n\n      // repeated sint64 longValues = 1;\n      case 1: {\n        let values = message.longValues || (message.longValues = []);\n        if ((tag & 7) === 2) {\n          let outerLimit = pushTemporaryLength(bb);\n          while (!isAtEnd(bb)) {\n            values.push(readVarint64ZigZag(bb));\n          }\n          bb.limit = outerLimit;\n        } else {\n          values.push(readVarint64ZigZag(bb));\n        }\n        break;\n      }\n\n      default:\n        skipUnknownField(bb, tag & 7);\n    }\n  }\n\n  return message;\n}\n\nexport interface Long {\n  low: number;\n  high: number;\n  unsigned: boolean;\n}\n\ninterface ByteBuffer {\n  bytes: Uint8Array;\n  offset: number;\n  limit: number;\n}\n\nfunction pushTemporaryLength(bb: ByteBuffer): number {\n  let length = readVarint32(bb);\n  let limit = bb.limit;\n  bb.limit = bb.offset + length;\n  return limit;\n}\n\nfunction skipUnknownField(bb: ByteBuffer, type: number): void {\n  switch (type) {\n    case 0: while (readByte(bb) & 0x80) { } break;\n    case 2: skip(bb, readVarint32(bb)); break;\n    case 5: skip(bb, 4); break;\n    case 1: skip(bb, 8); break;\n    default: throw new Error(\"Unimplemented type: \" + type);\n  }\n}\n\nfunction stringToLong(value: string): Long {\n  return {\n    low: value.charCodeAt(0) | (value.charCodeAt(1) << 16),\n    high: value.charCodeAt(2) | (value.charCodeAt(3) << 16),\n    unsigned: false,\n  };\n}\n\nfunction longToString(value: Long): string {\n  let low = value.low;\n  let high = value.high;\n  return String.fromCharCode(\n    low & 0xFFFF,\n    low >>> 16,\n    high & 0xFFFF,\n    high >>> 16);\n}\n\n// The code below was modified from https://github.com/protobufjs/bytebuffer.js\n// which is under the Apache License 2.0.\n\nlet f32 = new Float32Array(1);\nlet f32_u8 = new Uint8Array(f32.buffer);\n\nlet f64 = new Float64Array(1);\nlet f64_u8 = new Uint8Array(f64.buffer);\n\nfunction intToLong(value: number): Long {\n  value |= 0;\n  return {\n    low: value,\n    high: value >> 31,\n    unsigned: value >= 0,\n  };\n}\n\nlet bbStack: ByteBuffer[] = [];\n\nfunction popByteBuffer(): ByteBuffer {\n  const bb = bbStack.pop();\n  if (!bb) return { bytes: new Uint8Array(64), offset: 0, limit: 0 };\n  bb.offset = bb.limit = 0;\n  return bb;\n}\n\nfunction pushByteBuffer(bb: ByteBuffer): void {\n  bbStack.push(bb);\n}\n\nfunction wrapByteBuffer(bytes: Uint8Array): ByteBuffer {\n  return { bytes, offset: 0, limit: bytes.length };\n}\n\nfunction toUint8Array(bb: ByteBuffer): Uint8Array {\n  let bytes = bb.bytes;\n  let limit = bb.limit;\n  return bytes.length === limit ? bytes : bytes.subarray(0, limit);\n}\n\nfunction skip(bb: ByteBuffer, offset: number): void {\n  if (bb.offset + offset > bb.limit) {\n    throw new Error('Skip past limit');\n  }\n  bb.offset += offset;\n}\n\nfunction isAtEnd(bb: ByteBuffer): boolean {\n  return bb.offset >= bb.limit;\n}\n\nfunction grow(bb: ByteBuffer, count: number): number {\n  let bytes = bb.bytes;\n  let offset = bb.offset;\n  let limit = bb.limit;\n  let finalOffset = offset + count;\n  if (finalOffset > bytes.length) {\n    let newBytes = new Uint8Array(finalOffset * 2);\n    newBytes.set(bytes);\n    bb.bytes = newBytes;\n  }\n  bb.offset = finalOffset;\n  if (finalOffset > limit) {\n    bb.limit = finalOffset;\n  }\n  return offset;\n}\n\nfunction advance(bb: ByteBuffer, count: number): number {\n  let offset = bb.offset;\n  if (offset + count > bb.limit) {\n    throw new Error('Read past limit');\n  }\n  bb.offset += count;\n  return offset;\n}\n\nfunction readBytes(bb: ByteBuffer, count: number): Uint8Array {\n  let offset = advance(bb, count);\n  return bb.bytes.subarray(offset, offset + count);\n}\n\nfunction writeBytes(bb: ByteBuffer, buffer: Uint8Array): void {\n  let offset = grow(bb, buffer.length);\n  bb.bytes.set(buffer, offset);\n}\n\nfunction readString(bb: ByteBuffer, count: number): string {\n  // Sadly a hand-coded UTF8 decoder is much faster than subarray+TextDecoder in V8\n  let offset = advance(bb, count);\n  let fromCharCode = String.fromCharCode;\n  let bytes = bb.bytes;\n  let invalid = '\\uFFFD';\n  let text = '';\n\n  for (let i = 0; i < count; i++) {\n    let c1 = bytes[i + offset], c2: number, c3: number, c4: number, c: number;\n\n    // 1 byte\n    if ((c1 & 0x80) === 0) {\n      text += fromCharCode(c1);\n    }\n\n    // 2 bytes\n    else if ((c1 & 0xE0) === 0xC0) {\n      if (i + 1 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        if ((c2 & 0xC0) !== 0x80) text += invalid;\n        else {\n          c = ((c1 & 0x1F) << 6) | (c2 & 0x3F);\n          if (c < 0x80) text += invalid;\n          else {\n            text += fromCharCode(c);\n            i++;\n          }\n        }\n      }\n    }\n\n    // 3 bytes\n    else if ((c1 & 0xF0) == 0xE0) {\n      if (i + 2 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        c3 = bytes[i + offset + 2];\n        if (((c2 | (c3 << 8)) & 0xC0C0) !== 0x8080) text += invalid;\n        else {\n          c = ((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | (c3 & 0x3F);\n          if (c < 0x0800 || (c >= 0xD800 && c <= 0xDFFF)) text += invalid;\n          else {\n            text += fromCharCode(c);\n            i += 2;\n          }\n        }\n      }\n    }\n\n    // 4 bytes\n    else if ((c1 & 0xF8) == 0xF0) {\n      if (i + 3 >= count) text += invalid;\n      else {\n        c2 = bytes[i + offset + 1];\n        c3 = bytes[i + offset + 2];\n        c4 = bytes[i + offset + 3];\n        if (((c2 | (c3 << 8) | (c4 << 16)) & 0xC0C0C0) !== 0x808080) text += invalid;\n        else {\n          c = ((c1 & 0x07) << 0x12) | ((c2 & 0x3F) << 0x0C) | ((c3 & 0x3F) << 0x06) | (c4 & 0x3F);\n          if (c < 0x10000 || c > 0x10FFFF) text += invalid;\n          else {\n            c -= 0x10000;\n            text += fromCharCode((c >> 10) + 0xD800, (c & 0x3FF) + 0xDC00);\n            i += 3;\n          }\n        }\n      }\n    }\n\n    else text += invalid;\n  }\n\n  return text;\n}\n\nfunction writeString(bb: ByteBuffer, text: string): void {\n  // Sadly a hand-coded UTF8 encoder is much faster than TextEncoder+set in V8\n  let n = text.length;\n  let byteCount = 0;\n\n  // Write the byte count first\n  for (let i = 0; i < n; i++) {\n    let c = text.charCodeAt(i);\n    if (c >= 0xD800 && c <= 0xDBFF && i + 1 < n) {\n      c = (c << 10) + text.charCodeAt(++i) - 0x35FDC00;\n    }\n    byteCount += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n  writeVarint32(bb, byteCount);\n\n  let offset = grow(bb, byteCount);\n  let bytes = bb.bytes;\n\n  // Then write the bytes\n  for (let i = 0; i < n; i++) {\n    let c = text.charCodeAt(i);\n    if (c >= 0xD800 && c <= 0xDBFF && i + 1 < n) {\n      c = (c << 10) + text.charCodeAt(++i) - 0x35FDC00;\n    }\n    if (c < 0x80) {\n      bytes[offset++] = c;\n    } else {\n      if (c < 0x800) {\n        bytes[offset++] = ((c >> 6) & 0x1F) | 0xC0;\n      } else {\n        if (c < 0x10000) {\n          bytes[offset++] = ((c >> 12) & 0x0F) | 0xE0;\n        } else {\n          bytes[offset++] = ((c >> 18) & 0x07) | 0xF0;\n          bytes[offset++] = ((c >> 12) & 0x3F) | 0x80;\n        }\n        bytes[offset++] = ((c >> 6) & 0x3F) | 0x80;\n      }\n      bytes[offset++] = (c & 0x3F) | 0x80;\n    }\n  }\n}\n\nfunction writeByteBuffer(bb: ByteBuffer, buffer: ByteBuffer): void {\n  let offset = grow(bb, buffer.limit);\n  let from = bb.bytes;\n  let to = buffer.bytes;\n\n  // This for loop is much faster than subarray+set on V8\n  for (let i = 0, n = buffer.limit; i < n; i++) {\n    from[i + offset] = to[i];\n  }\n}\n\nfunction readByte(bb: ByteBuffer): number {\n  return bb.bytes[advance(bb, 1)];\n}\n\nfunction writeByte(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 1);\n  bb.bytes[offset] = value;\n}\n\nfunction readFloat(bb: ByteBuffer): number {\n  let offset = advance(bb, 4);\n  let bytes = bb.bytes;\n\n  // Manual copying is much faster than subarray+set in V8\n  f32_u8[0] = bytes[offset++];\n  f32_u8[1] = bytes[offset++];\n  f32_u8[2] = bytes[offset++];\n  f32_u8[3] = bytes[offset++];\n  return f32[0];\n}\n\nfunction writeFloat(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 4);\n  let bytes = bb.bytes;\n  f32[0] = value;\n\n  // Manual copying is much faster than subarray+set in V8\n  bytes[offset++] = f32_u8[0];\n  bytes[offset++] = f32_u8[1];\n  bytes[offset++] = f32_u8[2];\n  bytes[offset++] = f32_u8[3];\n}\n\nfunction readDouble(bb: ByteBuffer): number {\n  let offset = advance(bb, 8);\n  let bytes = bb.bytes;\n\n  // Manual copying is much faster than subarray+set in V8\n  f64_u8[0] = bytes[offset++];\n  f64_u8[1] = bytes[offset++];\n  f64_u8[2] = bytes[offset++];\n  f64_u8[3] = bytes[offset++];\n  f64_u8[4] = bytes[offset++];\n  f64_u8[5] = bytes[offset++];\n  f64_u8[6] = bytes[offset++];\n  f64_u8[7] = bytes[offset++];\n  return f64[0];\n}\n\nfunction writeDouble(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 8);\n  let bytes = bb.bytes;\n  f64[0] = value;\n\n  // Manual copying is much faster than subarray+set in V8\n  bytes[offset++] = f64_u8[0];\n  bytes[offset++] = f64_u8[1];\n  bytes[offset++] = f64_u8[2];\n  bytes[offset++] = f64_u8[3];\n  bytes[offset++] = f64_u8[4];\n  bytes[offset++] = f64_u8[5];\n  bytes[offset++] = f64_u8[6];\n  bytes[offset++] = f64_u8[7];\n}\n\nfunction readInt32(bb: ByteBuffer): number {\n  let offset = advance(bb, 4);\n  let bytes = bb.bytes;\n  return (\n    bytes[offset] |\n    (bytes[offset + 1] << 8) |\n    (bytes[offset + 2] << 16) |\n    (bytes[offset + 3] << 24)\n  );\n}\n\nfunction writeInt32(bb: ByteBuffer, value: number): void {\n  let offset = grow(bb, 4);\n  let bytes = bb.bytes;\n  bytes[offset] = value;\n  bytes[offset + 1] = value >> 8;\n  bytes[offset + 2] = value >> 16;\n  bytes[offset + 3] = value >> 24;\n}\n\nfunction readInt64(bb: ByteBuffer, unsigned: boolean): Long {\n  return {\n    low: readInt32(bb),\n    high: readInt32(bb),\n    unsigned,\n  };\n}\n\nfunction writeInt64(bb: ByteBuffer, value: Long): void {\n  writeInt32(bb, value.low);\n  writeInt32(bb, value.high);\n}\n\nfunction readVarint32(bb: ByteBuffer): number {\n  let c = 0;\n  let value = 0;\n  let b: number;\n  do {\n    b = readByte(bb);\n    if (c < 32) value |= (b & 0x7F) << c;\n    c += 7;\n  } while (b & 0x80);\n  return value;\n}\n\nfunction writeVarint32(bb: ByteBuffer, value: number): void {\n  value >>>= 0;\n  while (value >= 0x80) {\n    writeByte(bb, (value & 0x7f) | 0x80);\n    value >>>= 7;\n  }\n  writeByte(bb, value);\n}\n\nfunction readVarint64(bb: ByteBuffer, unsigned: boolean): Long {\n  let part0 = 0;\n  let part1 = 0;\n  let part2 = 0;\n  let b: number;\n\n  b = readByte(bb); part0 = (b & 0x7F); if (b & 0x80) {\n    b = readByte(bb); part0 |= (b & 0x7F) << 7; if (b & 0x80) {\n      b = readByte(bb); part0 |= (b & 0x7F) << 14; if (b & 0x80) {\n        b = readByte(bb); part0 |= (b & 0x7F) << 21; if (b & 0x80) {\n\n          b = readByte(bb); part1 = (b & 0x7F); if (b & 0x80) {\n            b = readByte(bb); part1 |= (b & 0x7F) << 7; if (b & 0x80) {\n              b = readByte(bb); part1 |= (b & 0x7F) << 14; if (b & 0x80) {\n                b = readByte(bb); part1 |= (b & 0x7F) << 21; if (b & 0x80) {\n\n                  b = readByte(bb); part2 = (b & 0x7F); if (b & 0x80) {\n                    b = readByte(bb); part2 |= (b & 0x7F) << 7;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    low: part0 | (part1 << 28),\n    high: (part1 >>> 4) | (part2 << 24),\n    unsigned,\n  };\n}\n\nfunction writeVarint64(bb: ByteBuffer, value: Long): void {\n  let part0 = value.low >>> 0;\n  let part1 = ((value.low >>> 28) | (value.high << 4)) >>> 0;\n  let part2 = value.high >>> 24;\n\n  // ref: src/google/protobuf/io/coded_stream.cc\n  let size =\n    part2 === 0 ?\n      part1 === 0 ?\n        part0 < 1 << 14 ?\n          part0 < 1 << 7 ? 1 : 2 :\n          part0 < 1 << 21 ? 3 : 4 :\n        part1 < 1 << 14 ?\n          part1 < 1 << 7 ? 5 : 6 :\n          part1 < 1 << 21 ? 7 : 8 :\n      part2 < 1 << 7 ? 9 : 10;\n\n  let offset = grow(bb, size);\n  let bytes = bb.bytes;\n\n  switch (size) {\n    case 10: bytes[offset + 9] = (part2 >>> 7) & 0x01;\n    case 9: bytes[offset + 8] = size !== 9 ? part2 | 0x80 : part2 & 0x7F;\n    case 8: bytes[offset + 7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;\n    case 7: bytes[offset + 6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;\n    case 6: bytes[offset + 5] = size !== 6 ? (part1 >>> 7) | 0x80 : (part1 >>> 7) & 0x7F;\n    case 5: bytes[offset + 4] = size !== 5 ? part1 | 0x80 : part1 & 0x7F;\n    case 4: bytes[offset + 3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;\n    case 3: bytes[offset + 2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;\n    case 2: bytes[offset + 1] = size !== 2 ? (part0 >>> 7) | 0x80 : (part0 >>> 7) & 0x7F;\n    case 1: bytes[offset] = size !== 1 ? part0 | 0x80 : part0 & 0x7F;\n  }\n}\n\nfunction readVarint32ZigZag(bb: ByteBuffer): number {\n  let value = readVarint32(bb);\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  return (value >>> 1) ^ -(value & 1);\n}\n\nfunction writeVarint32ZigZag(bb: ByteBuffer, value: number): void {\n  // ref: src/google/protobuf/wire_format_lite.h\n  writeVarint32(bb, (value << 1) ^ (value >> 31));\n}\n\nfunction readVarint64ZigZag(bb: ByteBuffer): Long {\n  let value = readVarint64(bb, /* unsigned */ false);\n  let low = value.low;\n  let high = value.high;\n  let flip = -(low & 1);\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  return {\n    low: ((low >>> 1) | (high << 31)) ^ flip,\n    high: (high >>> 1) ^ flip,\n    unsigned: false,\n  };\n}\n\nfunction writeVarint64ZigZag(bb: ByteBuffer, value: Long): void {\n  let low = value.low;\n  let high = value.high;\n  let flip = high >> 31;\n\n  // ref: src/google/protobuf/wire_format_lite.h\n  writeVarint64(bb, {\n    low: (low << 1) ^ flip,\n    high: ((high << 1) | (low >>> 31)) ^ flip,\n    unsigned: false,\n  });\n}\n"]}